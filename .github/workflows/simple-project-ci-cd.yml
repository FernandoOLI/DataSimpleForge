name: CI/CD Databricks Scala Job

on:
  push:
    paths:
      - 'src/**'
      - 'test/**'
      - '.github/workflows/**'
    branches: [main]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache SBT dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: sbt-${{ runner.os }}-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            sbt-${{ runner.os }}-

      - name: Install SBT
        run: |
          echo "Installing SBT..."
          curl -L -o sbt.deb https://repo.scala-sbt.org/scalasbt/debian/sbt-1.9.7.deb
          sudo dpkg -i sbt.deb
          sudo apt-get update
          sudo apt-get install -y sbt

      - name: Run Unit Tests
        run: sbt test

  build-and-upload:
    name: Build JAR and Upload to S3
    runs-on: ubuntu-latest
    needs: unit-tests

    env:
      AWS_REGION: us-east-2
      S3_BUCKET: personal-project-fernando-oliveira-pereira
      S3_KEY_PREFIX: jars/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache SBT dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: sbt-${{ runner.os }}-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            sbt-${{ runner.os }}-

      - name: Install SBT
        run: |
          echo "Installing SBT..."
          curl -L -o sbt.deb https://repo.scala-sbt.org/scalasbt/debian/sbt-1.9.7.deb
          sudo dpkg -i sbt.deb
          sudo apt-get update
          sudo apt-get install -y sbt

      - name: Get clean version (remove -SNAPSHOT)
        id: get_version
        run: |
          RAW_VERSION=$(sbt 'show version' | grep '\[info\]' | tail -1 | awk '{print $2}')
          CLEAN_VERSION=$(echo "$RAW_VERSION" | sed 's/-SNAPSHOT//')
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

      - name: Build JAR with overridden version
        run: sbt -Dversion.override=${{ steps.get_version.outputs.version }} clean assembly

      - name: Find built JAR
        id: findjar
        run: |
          JAR_PATH=$(find target -name "*.jar" | head -n 1)
          echo "JAR encontrado: $JAR_PATH"
          echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT

      - name: Rename JAR to simple-forge.jar
        run: |
          cp "${{ steps.findjar.outputs.jar_path }}" simple-forge.jar

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Upload JAR to S3
        run: |
          aws s3 cp simple-forge.jar s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY_PREFIX }}simple-forge.jar --acl bucket-owner-full-control
